# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

@access_token = ENV['GITLAB_ACCESS_TOKEN']

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    gradle(task: "clean assembleRelease")
    crashlytics
  
    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: "clean assembleRelease")
    upload_to_play_store
  end
  
  desc "Experimental"
  lane :poc do
    @message = number_of_commits
	@version_name = get_properties_value(
	  key: "VERSION_NAME",
	  path: "./version.properties"
	)
	@new_version = increment_version_name_in_properties_file(
      key: "VERSION_NAME",
      path: "./version.properties",
      update_type: "minor"
    )
  end
  
  lane :update_major do |values|
    @env = values[:env]
    @major_version = get_properties_value(
	  key: "MAJOR",
	  path: "./version.properties"
	)
	@major_version = @major_version.to_i + 1
	set_properties_value(
      path: "./version.properties",
      key: "MAJOR",
      value: @major_version
    )
	set_properties_value(
      path: "./version.properties",
      key: "MINOR",
      value: 0
    )
	set_properties_value(
      path: "./version.properties",
      key: "PATCH",
      value: 0
    )
	@new_version = increment_version_name_in_properties_file(
      key: "VERSION_NAME",
      path: "./version.properties",
      update_type: "major"
    )
	@new_branch = "#{@env}/#{@new_version}"
	sh "git checkout -b #{@new_branch}"
	display_version(
	  env: @env
	)
	gitlab(
	  version: @new_version,
	  branch: @new_branch,
	  env: @env
	)
  end
  
  lane :update_minor do |values|
    @env = values[:env]
    @minor_version = get_properties_value(
	  key: "MINOR",
	  path: "./version.properties"
	)
	@minor_version = @minor_version.to_i + 1
	set_properties_value(
      path: "./version.properties",
      key: "MINOR",
      value: @minor_version
    )
	set_properties_value(
      path: "./version.properties",
      key: "PATCH",
      value: 0
    )
	@new_version = increment_version_name_in_properties_file(
      key: "VERSION_NAME",
      path: "./version.properties",
      update_type: "minor"
    )
	@new_branch = "#{@env}/#{@new_version}"
	sh "git checkout -b #{@new_branch}"
	display_version(
	  env: @env
	)
	gitlab(
	  version: @new_version,
	  branch: @new_branch,
	  env: @env
	)
  end
  
  lane :update_patch do |values|
    @env = values[:env]
    @patch_version = get_properties_value(
	  key: "PATCH",
	  path: "./version.properties"
	)
	@patch_version = @patch_version.to_i + 1
	set_properties_value(
      path: "./version.properties",
      key: "PATCH",
      value: @patch_version
    )
	@new_version = increment_version_name_in_properties_file(
      key: "VERSION_NAME",
      path: "./version.properties",
      update_type: "patch"
    )
	@new_branch = "#{@env}/#{@new_version}"
	sh "git checkout -b #{@new_branch}"
	display_version(
	  env: @env
	)
	gitlab(
	  version: @new_version,
	  branch: @new_branch,
	  env: @env
	)
  end
  
  lane :gitlab do |values|
    @ver = values[:version]
	@env = values[:env]
	@source_branch = values[:branch]
    create_merge_request(
      api_token: @access_token,
      project_id: "28846533",
      title: "Bump #{@env} version to v#{@ver}",
	  source: "#{@source_branch}",
	  target: "master"
    )
  end
  
  lane :display_version do |values|
    @env = values[:env]
    puts "Updated to new version! v#{@new_version}"
	git_commit(path: "./version.properties", message: "BUMP #{@env} version to v#{@new_version}")
	push_to_git_remote
  end
end
